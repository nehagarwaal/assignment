{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This is a template to create AWS VPC. The template consists of public and private subnets across 4 availability zones. It deploys an Internet Gateway with a default route on the public subnets. It deploys a NAT Gateway and default routes for them in the private subnet",
    "Parameters": {
        "VpcName": {
            "Type": "String",
            "Description": "Name of the VPC"
        },
        "VpcCIDR": {
            "Type": "String",
            "Description": "CIDR for VPC. The value can be minimum of /28 and a maximum of /16"
        },
        "PublicSubnetsCIDR": {
            "Type": "CommaDelimitedList",
            "Description": "Comma separated CIDR list for Public subnet"
        },
        "PrivateSubnetsCIDR": {
            "Type": "CommaDelimitedList",
            "Description": "Comma separated CIDR for Private subnet"
        },
        "Region": {
            "Type": "String",
            "Description": "Region in which the VPC has to be created."
        },
        "Environment": {
            "Type": "String",
            "Description": "Environment like stage and prod"
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": { "Ref": "VpcCIDR" },
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "InstanceTenancy": "default",
                "Tags": [
                    {"Key": "Name","Value": { "Ref": "VpcName" }},
                    {"Key": "Environment","Value": { "Ref": "Environment" }}
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join": [ "-",[{ "Ref": "VpcName" }, "igw" ]]}},
                    {"Key": "Environment","Value": { "Ref": "Environment" }}
                ]
            }
        },
        "InternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": { "Ref": "InternetGateway" },
                "VpcId": { "Ref": "VPC"}
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "Region" }}]},
                "CidrBlock": { "Fn::Select": [ "0", { "Ref": "PublicSubnetsCIDR" }]},
                "MapPublicIpOnLaunch": "false",
                "Tags": [{ "Key": "Name", "Value": { "Fn::Join": [ "-", [{ "Ref": "VpcName" }, "public", { "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "Region" }}]}, "1"]]}},
                    { "Key": "immutable_metadata", "Value": {"Fn::Join": [ "", [ "{\"purpose\":\"public(", {"Ref": "VpcName"},")\"}"]] }},
                    {"Key": "Environment","Value": { "Ref": "Environment" }}]
            }
        },
        "AppSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "Region"}}]},
                "CidrBlock": { "Fn::Select": [ "0", { "Ref": "AppSubnetsCIDR" }]},
                "MapPublicIpOnLaunch": "false",
                "Tags": [{ "Key": "Name", "Value": { "Fn::Join": [ "-", [{ "Ref": "VpcName" }, "app", "private", { "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "Region" }}]}, "1" ]]}},
                    { "Key": "immutable_metadata", "Value": {"Fn::Join": [ "", [ "{\"purpose\":\"app(", {"Ref": "VpcName"},")\"}"]] }},
                    {"Key": "Environment","Value": { "Ref": "Environment" }}]
            }
        },
        "NatGatewayEIP": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "Domain": { "Ref": "VPC" }
            }
        },
        "NatGateway": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": { "Fn::GetAtt": [ "NatGatewayEIP", "AllocationId" ]},
                "SubnetId": { "Ref": "PublicSubnet" }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [{ "Key": "Name", "Value": { "Fn::Join": [ "-", [{ "Ref": "VpcName" }, "public", "rt"]]}},
                {"Key": "Environment","Value": { "Ref": "Environment" }}]
            }
        },
        "DefaultPublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "InternetGateway" }
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "SubnetId": { "Ref": "PublicSubnet" }
            }
        },        
        "AppRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [{ "Key": "Name", "Value": { "Fn::Join": [ "-", [{ "Ref": "VpcName" }, "app", "private", "rt", "1" ]]}},
                {"Key": "Environment","Value": { "Ref": "Environment" }}]
            }
        },
        "DefaultAppPrivateRoute1": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": { "Ref": "AppRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": { "Ref": "NatGateway" }
            }
        },
        "AppSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "AppRouteTable" },
                "SubnetId": { "Ref": "AppSubnet" }
            }
        },
        "PublicSubnetNacl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [{ "Key": "Name", "Value": { "Fn::Join": [ "-", [{ "Ref": "VpcName" }, "public", "nacl" ]]}},
                {"Key": "Environment","Value": { "Ref": "Environment" }}]
            }
        },
        "PublicSubnetEgressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicSubnetNacl" },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "PublicSubnetIngressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicSubnetNacl" },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "PublicSubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet" },
                "NetworkAclId": { "Ref": "PublicSubnetNacl" }
            }
        },
        "AppSubnetNacl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [{ "Key": "Name", "Value": { "Fn::Join": [ "-", [{ "Ref": "VpcName" }, "app", "private", "nacl" ]]}},
                {"Key": "Environment","Value": { "Ref": "Environment" }}]
            }
        },
        "AppSubnetEgressNetworkAclEntry1": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "AppSubnetNacl" },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": { "Ref": "VpcCIDR" }
            }
        },
        "AppSubnetEgressNetworkAclEntry2": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "AppSubnetNacl" },
                "RuleNumber": "200",
                "Protocol": "6",
                "PortRange": {"From": "32768", "To": "65535"},
                "Egress": "true",
                "RuleAction": "allow",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "AppSubnetEgressNetworkAclEntry3": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "AppSubnetNacl" },
                "RuleNumber": "300",
                "Protocol": "6",
                "PortRange": { "From": "80", "To": "80" },
                "Egress": "true",
                "RuleAction": "allow",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "AppSubnetEgressNetworkAclEntry4": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "AppSubnetNacl" },
                "RuleNumber": "400",
                "Protocol": "6",
                "PortRange": { "From": "443", "To": "443" },
                "Egress": "true",
                "RuleAction": "allow",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "AppSubnetIngressNetworkAclEntry1": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "AppSubnetNacl" },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "CidrBlock": { "Ref": "VpcCIDR" }
            }
        },
        "AppSubnetIngressNetworkAclEntry2": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "AppSubnetNacl" },
                "RuleNumber": "200",
                "Protocol": "6",
                "PortRange": {"From": "32768", "To": "65535"},
                "RuleAction": "allow",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "AppSubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "AppSubnet" },
                "NetworkAclId": { "Ref": "AppSubnetNacl" }
            }
        },
        "FlowLogRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
               "AssumeRolePolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [ "vpc-flow-logs.amazonaws.com" ]
                     },
                     "Action": [ "sts:AssumeRole" ]
                  } ]
               },
               "Path": "/"
            }
        },
        "FlowLogPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
               "PolicyName": "vpc-flow-log-policy",
               "PolicyDocument": {
                "Statement": [
                    {
                        "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:DescribeLogGroups",
                            "logs:DescribeLogStreams",
                            "logs:PutLogEvents"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    }
                ]},
                "Roles": [{ "Ref": "FlowLogRole" }]
            }
         },
        "VPCFlowLogs": {
            "Type" : "AWS::EC2::FlowLog",
            "Properties" : {
                "DeliverLogsPermissionArn" : { "Fn::GetAtt" : ["FlowLogRole", "Arn"] },
                "LogGroupName" : "FlowLogsGroup",
                "ResourceId" : { "Ref" : "VPC" },
                "ResourceType" : "VPC",
                "TrafficType" : "ALL"
            }
        }
    },
    "Outputs": {
        "VPC": {
            "Description": "Reference to the VPC created",
            "Value": { "Ref": "VPC" }
        },
        "PublicSubnet": {
            "Description": "Reference to the Public Subnet 1 created",
            "Value": { "Ref": "PublicSubnet" }
        },
        "AppSubnet": {
            "Description": "Reference to the App Subnet 1 created",
            "Value": { "Ref": "AppSubnet" }
        }
    }
}